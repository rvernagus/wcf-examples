//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Asynchronous.Client
{
    

[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
[System.ServiceModel.ServiceContractAttribute(ConfigurationName="IMyService")]
public interface IMyService
{
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMyService/MakeCall", ReplyAction="http://tempuri.org/IMyService/MakeCallResponse")]
    void MakeCall(string data);
    
    [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IMyService/MakeCall", ReplyAction="http://tempuri.org/IMyService/MakeCallResponse")]
    System.IAsyncResult BeginMakeCall(string data, System.AsyncCallback callback, object asyncState);
    
    void EndMakeCall(System.IAsyncResult result);
}

[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
public interface IMyServiceChannel : IMyService, System.ServiceModel.IClientChannel
{
}

[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
public partial class MyServiceClient : System.ServiceModel.ClientBase<IMyService>, IMyService
{
    
    private BeginOperationDelegate onBeginMakeCallDelegate;
    
    private EndOperationDelegate onEndMakeCallDelegate;
    
    private System.Threading.SendOrPostCallback onMakeCallCompletedDelegate;
    
    public MyServiceClient()
    {
    }
    
    public MyServiceClient(string endpointConfigurationName) : 
            base(endpointConfigurationName)
    {
    }
    
    public MyServiceClient(string endpointConfigurationName, string remoteAddress) : 
            base(endpointConfigurationName, remoteAddress)
    {
    }
    
    public MyServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
            base(endpointConfigurationName, remoteAddress)
    {
    }
    
    public MyServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
            base(binding, remoteAddress)
    {
    }
    
    public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> MakeCallCompleted;
    
    public void MakeCall(string data)
    {
        base.Channel.MakeCall(data);
    }
    
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    public System.IAsyncResult BeginMakeCall(string data, System.AsyncCallback callback, object asyncState)
    {
        return base.Channel.BeginMakeCall(data, callback, asyncState);
    }
    
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    public void EndMakeCall(System.IAsyncResult result)
    {
        base.Channel.EndMakeCall(result);
    }
    
    private System.IAsyncResult OnBeginMakeCall(object[] inValues, System.AsyncCallback callback, object asyncState)
    {
        string data = ((string)(inValues[0]));
        return this.BeginMakeCall(data, callback, asyncState);
    }
    
    private object[] OnEndMakeCall(System.IAsyncResult result)
    {
        this.EndMakeCall(result);
        return null;
    }
    
    private void OnMakeCallCompleted(object state)
    {
        if ((this.MakeCallCompleted != null))
        {
            InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
            this.MakeCallCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
        }
    }
    
    public void MakeCallAsync(string data)
    {
        this.MakeCallAsync(data, null);
    }
    
    public void MakeCallAsync(string data, object userState)
    {
        if ((this.onBeginMakeCallDelegate == null))
        {
            this.onBeginMakeCallDelegate = new BeginOperationDelegate(this.OnBeginMakeCall);
        }
        if ((this.onEndMakeCallDelegate == null))
        {
            this.onEndMakeCallDelegate = new EndOperationDelegate(this.OnEndMakeCall);
        }
        if ((this.onMakeCallCompletedDelegate == null))
        {
            this.onMakeCallCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnMakeCallCompleted);
        }
        base.InvokeAsync(this.onBeginMakeCallDelegate, new object[] {
                    data}, this.onEndMakeCallDelegate, this.onMakeCallCompletedDelegate, userState);
    }
}
}
